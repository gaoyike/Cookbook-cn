[[Around]]
Lift周边
----------

这章将给出很多例子关于Lift和其他系统, 比如说发送email或者运行一个task.

Many of the recipes in this chapter have code examples in a project at Github: https://github.com/LiftCookbook/cookbook_around[https://github.com/LiftCookbook/cookbook_around].


[[SendTextEmail]]
发送一个文本email
~~~~~~~~~~~~~~~

Problem
^^^^^^^

你想只用Lift应用发送一个纯文本的Email

Solution
^^^^^^^^

使用 `Mailer`:

[source,scala]
----------------------------------------
import net.liftweb.util.Mailer
import net.liftweb.util.Mailer._

Mailer.sendMail(
  From("you@example.org"),
  Subject("Hello"),
  To("other@example.org"),
  PlainMailBodyType("Hello from Lift") )
----------------------------------------

Discussion
^^^^^^^^^^

`Mailer` 异步的发送一个信息, 这意味着 `sendMail` 将会立刻的返回值, 所以你不会担心这里会有时间花费在一个 SMTP 服务. 还有一个方法 `blockingSendMail`
它将block, 然后等待返回.

默认的, SMTP 将使用 `localhost`. 你可以通过添加 `mail.smtp.host` 属性来改变它.
比如说, 修改 `src/mail/resources/props/default.props` 然后添加:

--------------------------------
mail.smtp.host=smtp.example.org
--------------------------------

方法 `sendMail` 的参数是 `From`, `Subject` 和任意数量的 `MailTypes`:

* `To` -- 收件人地址.
* `CC` -- 抄送
* `BCC` -- 抄送
* `ReplyTo` -- 回复人的地址.
* `MessageHeader` -- key/value信息的头部.
* `PlainMailBodyType` -- 一个文本的, UTF-8编码的Email.
* `PlainPlusBodyType` -- 你自定义编码的文本Email.
* `XHTMLMailBodyType` -- HTML email (<<HTMLEmail>>).
* `XHTMLPlusImages` --  有附件的email (<<EmailWithAttachments>>).

在上一个例子中, 我们添加了两个类型:`PlainMailBodyType` 和 `To`. 如果你喜欢, 你可以添加更多:

[source,scala]
----------------------------------------
Mailer.sendMail(
  From("you@example.org"),
  Subject("Hello"),
  To("other@example.org"),
  To("someone@example.org"),
  MessageHeader("X-Ignore-This", "true"),
  PlainMailBodyType("Hello from Lift") )
----------------------------------------


类似于 `MailTypes` (`To`, `CC`, `BCC`, `ReplyTo`) 的地址可以给于 "personal name":

[source,scala]
----------------------------------------
From("you@example.org", Full("Example Corporation"))
----------------------------------------

以上会显示在你的邮箱:

----------------------------------------
From: Example Corporation <you@example.org>
----------------------------------------

默认的编码是 UTF-8. 如果你需要改变它, 可以改变 `PlainMailBodyType` 和 `PlainPlusBodyType("Hello from Lift", "ISO8859_1")`.

See Also
^^^^^^^^

<<EmailWithAttachments>> 介绍了如何在email中添加附件.

如果你想用 HTML email, 请看 <<HTMLEmail>>.


[[LogEmail]]
在Log中显示Email而不是发送
~~~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

你在本地测试的时候, 不想看到Email发送出去, 而是想显示在Log中.

Solution
^^^^^^^^

设置一个log方法到 `Mailer.devModeSend` 在 `Boot.scala`:

[source,scala]
---------------------------------------------------------
import net.liftweb.util.Mailer._
import javax.mail.internet.{MimeMessage,MimeMultipart}

Mailer.devModeSend.default.set( (m: MimeMessage) =>
  logger.info("Would have sent: "+m.getContent)
)
---------------------------------------------------------

当你发送一个Email通过 `Mailer` 时, 没有SMTP服务将被启用, 但是, 你会看到以下处处:

---------------------------------------------------------
Would have sent: Hello from Lift
---------------------------------------------------------

Discussion
^^^^^^^^^^

Lift Mailer允许你控制Email是如何发送的在任何的run mode下:

* `devModeSend` -- 以默认发送.
* `testModeSend` -- 只显示在Log中.
* `stagingModeSend` -- 以默认发送.
* `productionModeSend` -- 以默认发送.
* `pilotModeSend` -- 以默认发送.
* `profileModeSend` -- 以默认发送.

方法 `testModeSend` 发送一个log引用到 `MimeMessage`, 这意味着, 你的log将会显示为:

--------------------------------------
Sending javax.mail.internet.MimeMessage@4a91a883
--------------------------------------

这章只是改变了默认的 `Mailer` 的行为, 当你在使用developer mode的时候. (这是默认的).

Java Mail 没有一个方法可以显示Email所有的部分, 如果你想看, 你需要写自己的方法. 比如说:

[source,scala]
---------------------------------------------------------
def display(m: MimeMessage) : String = {

  val nl = System.getProperty("line.separator")

  val from = "From: "+m.getFrom.map(_.toString).mkString(",")

  val subj = "Subject: "+m.getSubject

  def parts(mm: MimeMultipart) = (0 until mm.getCount).map(mm.getBodyPart)

  val body = m.getContent match {
    case mm: MimeMultipart =>
      val bodyParts = for (part <- parts(mm)) yield part.getContent.toString
      bodyParts.mkString(nl)

    case otherwise => otherwise.toString
  }

  val to = for {
    rt <- List(RecipientType.TO, RecipientType.CC, RecipientType.BCC)
    address <- Option(m.getRecipients(rt)) getOrElse Array()
  } yield rt.toString + ": " + address.toString

  List(from, to.mkString(nl), subj, body) mkString nl
}

Mailer.devModeSend.default.set( (m: MimeMessage) =>
  logger.info("Would have sent: "+display(m))
)
---------------------------------------------------------

这个将产生以下的:

---------------------------------------------------------
Would have sent: From: you@example.org
To: other@example.org
To: someone@example.org
Subject: Hello
Hello from Lift
---------------------------------------------------------

在这里例子中, `display` 方法几乎是最直接的. 获得 `body` 的值需要从body的值中分解出来.  这个将会在一个有结构的email中被触发, 比如说HTML Email <<HTMLEmail>>.

这章中, 最重要的部分是设置一个方法 `MimeMessage => Unit` 在 `Mailer.devModeSend`.  我们虽然使用的是Log, 但是你可以通过这个方法来处理你想要的各种信息. 包括输出Log, 然后发送Email, 或者记录发送信息到数据库.

如果你想测试一个正在发送email的系统, 打开Java Mail debug mode.  在 `default.props` 中添加:

[source, properties]
--------------------------------------
mail.debug=true
--------------------------------------

这个生成一个底层的输出在 `javax.mail` 系统上, 当邮件被发出:

--------------------------------------
DEBUG: JavaMail version 1.4.4
DEBUG: successfully loaded resource: /META-INF/javamail.default.providers
DEBUG SMTP: useEhlo true, useAuth false
DEBUG SMTP: trying to connect to host "localhost", port 25, isSSL false
...
--------------------------------------

See Also
^^^^^^^^

Run modes 在这里有介绍:
 https://www.assembla.com/spaces/liftweb/wiki/Run_Modes[https://www.assembla.com/spaces/liftweb/wiki/Run_Modes].


[[HTMLEmail]]
发送HTML Email
~~~~~~~~~~~~~~

Problem
^^^^^^^

你想发送一个HTML email在你的Lift应用中.

Solution
^^^^^^^^

给 `Mailer` 一个 `NodeSeq` 包含HTML信息:

[source,scala]
----------------------------------
import net.liftweb.util.Mailer
import net.liftweb.util.Mailer._

val msg = <html>
   <head>
     <title>Hello</title>
   </head>
   <body>
    <h1>Hello</h1>
   </body>
  </html>

Mailer.sendMail(
  From("me@example.org"),
  Subject("Hello"),
  To("you@example.org"),
  msg)
----------------------------------

Discussion
^^^^^^^^^^

一个不明确的转化从 `NodeSeq` 到 `XHTMLMailBodyType`. 它确保了邮件的类型是 "text/html".尽管名字是 "XHTML", 信息将使用 HTML5 语法传递.

你可以通过改变 `mail.charset` 在你的Lift中, 来改变HTML编码.

如果你想设置为文本并且是HTML, 你可以设置在 `BodyType` class:

[source, scala]
---------------------------------------------------
val html = <html>
  <head>
    <title>Hello</title>
  </head>
  <body>
    <h1>Hello!</h1>
  </body>
</html>

var text = "Hello!"

Mailer.sendMail(
  From("me@example.org"),
  Subject("Hello"),
  To("you@example.org"),
  PlainMailBodyType(text),
  XHTMLMailBodyType(html)
)
---------------------------------------------------

这个信息将为 "multipart/alternative":

------------------------------------------
Content-Type: multipart/alternative;
  boundary="----=_Part_1_1197390963.1360226660982"
Date: Thu, 07 Feb 2013 02:44:22 -0600 (CST)

------=_Part_1_1197390963.1360226660982
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit

Hello!
------=_Part_1_1197390963.1360226660982
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: 7bit

<html>
      <head>
        <title>Hello</title>
      </head>
      <body>
        <h1>Hello!</h1>
      </body>
    </html>
------=_Part_1_1197390963.1360226660982--
------------------------------------------

当收到一个这个Email时, 它让客户端选择是那种类型的 (text or HTML).


See Also
^^^^^^^^

如果你想发送带附件的邮件, 请看<<EmailWithAttachments>>.




[[AuthEmail]]
发送一个验证Email
~~~~~~~~~~~~~~~~

Problem
^^^^^^^

你想通过SMTP服务来发送一个验证Email.

Solution
^^^^^^^^

设置 `Mailer.authenticator` 在 `Boot` 中, 为你的SMTP服务的信息, 并且开启 `mail.smtp.auth` 在你的设置中.

修改 `Boot.scala` :

[source,scala]
--------------------------------------------------------
import net.liftweb.util.{Props, Mailer}
import javax.mail.{Authenticator,PasswordAuthentication}

Mailer.authenticator = for {
  user <- Props.get("mail.user")
  pass <- Props.get("mail.password")
} yield new Authenticator {
  override def getPasswordAuthentication =
    new PasswordAuthentication(user,pass)
}
--------------------------------------------------------

在这个例子中, 我们希望Lift属性中包含用户名和信息, 所以我们需要修改 `src/main/resources/props/default.props`:

[source,scala]
------------------------------------------
mail.smtp.auth=true
mail.user=me@example.org
mail.password=correct horse battery staple
mail.smtp.host=smtp.sendgrid.net
------------------------------------------

当你发送一个email, 在 `default.props` 中的信息将用来作为验证资料在SMTP服务器上.

Discussion
^^^^^^^^^^

我们使用了一个Lift的属性文件来设置验证信息. 这有一个好处是, 我们可以让验证过程只发生在运行模式下. 比如说, 如果我们的 `default.props` 不包含验证设置, 但是 `production.default.props` 包含, 这会让验证不发生在在 development mode, 这确保了我们不会错误的发送邮件在生产环境上.

如果你没有用一个属性文件在这里: Lift Mailer也支持JNDI, 或者你可以设置 `Mailer.authenticator`, 来寻找验证信息.

然而, 一些邮件服务, 比如说SendGrid, 他们需要设置 `mail.smtp.auth=true` , 这需要在你的属性文件中设置, 或者在JVM上设置: `-Dmail.smtp.auth=true`.

See Also
^^^^^^^^

就像 `mail.smtp.auth` 一样, 还有很多别的设置来控制Java Mail API. 包括控制端口和数量. 你可以在如下地址找到他们: http://javamail.kenai.com/nonav/javadocs/com/sun/mail/smtp/package-summary.html[http://javamail.kenai.com/nonav/javadocs/com/sun/mail/smtp/package-summary.html].


[[EmailWithAttachments]]
发送一个有附件的Email
~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

你想发送一个Email, 里面包含一个或者多个附件.

Solution
^^^^^^^^

使用 `Mailer` `XHTMLPlusImages` 来打包一个或者多个附件.

假设我们想添加一而过 CSV 文件, 然后发送邮件:

[source,scala]
--------------------------------------------------------------
val content = "Planet,Discoverer\r\n" +
  "HR 8799 c, Marois et al\r\n" +
  "Kepler-22b, Kepler Science Team\r\n"

case class CSVFile(bytes: Array[Byte],
  filename: String = "file.csv",
  mime: String = "text/csv; charset=utf8; header=present" )

val attach = CSVFile(content.mkString.getBytes("utf8"))

val body = <p>Please research the enclosed.</p>

val msg = XHTMLPlusImages(body,
  PlusImageHolder(attach.filename, attach.mime, attach.bytes))

Mailer.sendMail(
  From("me@example.org",
  Subject("Planets"),
  To("you@example.org"),
  msg)
--------------------------------------------------------------

在这里, 我们的类型是 `XHTMLPlusImages` 和附件. 在这里, 附件,  `PlusImageHolder`, 是一个类型为 `Array[Byte]`, mime-type 和一个filename.


Discussion
^^^^^^^^^^

当你需要添加很多附件时, `XHTMLPlusImages` 可以接受超过一个的 `PlusImageHolder`.  尽管名字 `PlusImageHolder` 看起来像只是添加一个图片, 其实, 你可以添加任何文件通过使用 `Array[Byte]` 和一个适当的 mime type.

默认情况下, 邮件将使用一个 `inline` 的方法发送. 这控制了 `Content-Disposition` 的header在文件中, 并且 "inline" 意味着, 邮件将被自动打开, 当用户浏览的时候. 另一个选项是 "attachment", 这可以通过使用`PlusImageHolder`的最后一个参数来改变:

[source,scala]
--------------------------------------------------------------
PlusImageHolder(attach.filename, attach.mime, attach.bytes, attachment=true)
--------------------------------------------------------------

在现实中, 邮件的客户端会自动选择它喜欢显示的方法, 但是这个方法给你了一些控制的权力.


添加一个事先准备好的文件, 你可以使用 `LiftRules.loadResource` 来加载文件.  作为一个例子, 如果我们的工程包含一个 `Kepler-22b_System_Diagram.jpg` 文件在,  `src/main/resources/` 文件夹, 我们可以这样使用:

[source,scala]
--------------------------------------------------------------
val filename = "Kepler-22b_System_Diagram.jpg"

val msg =
  for ( bytes <- LiftRules.loadResource("/"+filename) )
  yield XHTMLPlusImages(
    <p>Please research this planet.</p>,
    PlusImageHolder(filename, "image/jpg", bytes) )

msg match {
  case Full(m) =>
    Mailer.sendMail(
      From("me@example.org"),
      Subject("Planet attachment"),
      To("you@example.org"),
      m)

  case _ =>
    logger.error("Planet file not found")
}
--------------------------------------------------------------

作为 `src/main/resources`, 它已经是在工程目录下, 我们将文件名发送到 `loadResource` 通过使用 `/`.

`loadResource` 返回一个`Box[Array[Byte]]`, 因为我们不确定文件是不是存在. 我们将它放入 `Box[XHTMLPlusImages]` 然后使用它去发送附件, 或者发送log, 提示文件不存在.


See Also
^^^^^^^^

信息被发送通过使用 "multipart/related" mime header, 和一个  "inline" 方法.  Lift ticket #1197 链接里有资料是关于 "multipart/mixed" 将会解决一个使用 Microsoft Exchange的问题. 请看: https://github.com/lift/framework/issues/1197[https://github.com/lift/framework/issues/1197].

RFC 2183 describes the "Content-Disposition" header: http://www.ietf.org/rfc/rfc2183.txt[http://www.ietf.org/rfc/rfc2183.txt].



[[RunLater]]
在将来的时间运行一个任务
~~~~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

你想计划一个任务, 让它在将来的时间运行.

Solution
^^^^^^^^

使用 `net.liftweb.util.Schedule`:

[source,scala]
------------------------------------------------
import net.liftweb.util.Schedule
import net.liftweb.util.Helpers._

Schedule(() => println("doing it"), 30 seconds)
------------------------------------------------

它会在30秒后, 打印出"doing it".

Discussion
^^^^^^^^^^

方法 `Schedule` 的参数为 `() => Unit`, 是将来要发生的事情, 和一个 `TimeSpan` 来自 Lift的 `TimeHelpers` 是我们想让它发生的时间.  这里的 `30 seconds` 返回一个 `TimeSpan` 使用了 `Helpers._` import, 不过这里有一个变化, 你可以使用 `Long` millisecond, 如果你喜欢它:

[source,scala]
------------------------------------------------
Schedule.perform(() => println("doing it"), 30*1000L)
------------------------------------------------

Lift使用 `ScheduledExecutorService` 在 `java.util.concurrent`中, 然后返回一个 `ScheduledFuture[Unit]`. 你可以使用这个future `cancel` 这个名字, 在它返回之前.

也许这是一个惊喜, 你发现使用 `Schedule` 可以只传递一个方法作为参数, 并且没有一个延迟的值.  这个版本的方法, 立刻运行参数, 但是是在另一个线程上. 这是一个简单的方法, 既可以运行一个任务, 有可以免去设置actor的时间.

还有一个 `Schedule.schedule` 方法, 可以发送给一个特定的actor一个特定的信息, 在一段延迟以后.  它以 `TimeSpan` 延迟作为参数, 但是同样, `Schedule.perform` 版本可以使用 `Long` 作为参数.


See Also
^^^^^^^^

<<RunTasksPeriodically>> 包含了如何计划一个actor.

`ScheduledFuture` 是一个关于 `Future` 的JavaDoc: http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/Future.html[http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/Future.html].  如果你想建立一个低延迟, 底层的, 复杂的多线程系统, 可以参考 _Java Concurrency in Practice_ close by (Goetz _et al._, 2006, Addison-Wesley Professional).





[[RunTasksPeriodically]]
周期性的运行一个任务
~~~~~~~~~~~~~~~~~~~

Problem
^^^^^^^

你想运行一个任务在一段特定的周期中.

Solution
^^^^^^^^

使用 `net.liftweb.util.Schedule` 确保你调用 `schedule`, 让Lift重新计划一个新的延迟. 比如说, 使用一个actor:

[source,scala]
-------------------------------------------------
import net.liftweb.util.Schedule
import net.liftweb.actor.LiftActor
import net.liftweb.util.Helpers._

object MyScheduledTask extends LiftActor {

  case class DoIt()
  case class Stop()

  private var stopped = false

   def messageHandler = {
     case DoIt if !stopped =>
        Schedule.schedule(this, DoIt, 10 minutes)
       // ... do useful work here

     case Stop =>
       stopped = true
   }
}
-------------------------------------------------

这个例子建立了 `LiftActor`. 如果收到一个 `DoIt` 信息, actor会自动重新计划. 在这里, actor每隔10分钟被调用一次.

Discussion
^^^^^^^^^^

方法 `Schedule.schedule` 确保了 `this` actor 发送 `DoIt` 信息在10分钟后.

为了运行这个例子, 在 `Boot.scala`中, 发送 `DoIt` 信息到actor:

[source,scala]
----------------------------------------------------------------------------
MyScheduledTask ! MyScheduledTask.DoIt
----------------------------------------------------------------------------

为了确保在Lift关闭的时候, 线程正确的关闭, 我们注册一个关闭的hook在 `Boot.scala` 来发送 `Stop` 信息到actor, 去避免以后的重新计划:

[source,scala]
----------------------------------------------------------------------------
LiftRules.unloadHooks.append( () => MyScheduledTask ! MyScheduledTask.Stop )
----------------------------------------------------------------------------

如果没有 `Stop` 信息, actor将一直重新计划, 直到JVM关闭. 这个也许是可以接受的, 但是在我们使用SBT开发的时候, 如果不用 `Stop` 信息, 你的JVM会一直运行直到 `container:stop` 命令.

Schedule返回一个 `ScheduledFuture[Unit]` 从Java的并行库中, 它将允许你使用 `cancel` 来控制停止线程.

See Also
^^^^^^^^

Chapter 1 of _Lift in Action_ (Perrett, 2011, Manning Publications Co) 包含了一个Comet Actor使用`Schedule`.



[[FetchURLs]]
加载URLs
~~~~~~~~~~

Problem
^^^^^^^

你想你的Lift应用加载一个URL, 并且处理它为text, JSON, XML 或者HTML.

Solution
^^^^^^^^

使用 _Dispatch_, "一个HTTP异步互动的库".

在你开始前, 加载Dispatch依赖库在你的 `build.sbt` 文件:

[source,scala]
-------------------------------------------------
libraryDependencies += "net.databinder.dispatch" %% "dispatch-core" % "0.9.5"
-------------------------------------------------

通过使用Dispatch文档的例子, 我们可以创造一个HTTP请求, 然后返回服务所在的国家 http://www.hostip.info/use.html[http://www.hostip.info/use.html]:

[source,scala]
------------------------------------------
import dispatch._
val svc = url("http://api.hostip.info/country.php")
val country : Promise[String] = Http(svc OK as.String)

println(country())
------------------------------------------

请注意, `country` 不是一个 `String` 而是一个 `Promise[String]`, 并且我们 `apply` 它来等待返回的值.

返回的值会是 `GB`, 或者`XX` 如果你的IP地址是其他国家.

Discussion
^^^^^^^^^^

这个简单的例子需要一个200状态的返回结果, 并且把返回的结果变成一个`String`, 不过这只是只用Dispatch的一个非常小的部分, 我们会在这章中介绍更多的例子.

如果请求返回的不是一个200状态会怎么样? 在这里, 我们会得到一个异常: "Unexpected response status: 404". 有几种方法可以改变这种行为.

我们需要一个`Option`:

[source,scala]
------------------------------------------
val result : Option[String] = country.option()
------------------------------------------

就像你期待的一样, 它将返回 `None` 或者 `Some[String]`. 然而, 如果你有一个在debug level上的logging, 那么你会看到请求和回复, 并且还有一个错误信息从你的Netty库中发出.  如果你不想看到他们, 你可以添加以下到`default.logback.xml` 文件:

[source, xml]
------------------------------------------
<logger name="com.ning.http.client" level="WARN"/>
------------------------------------------

另一个可能性是 `either`, 它的参数, `Right` 是一个你期待的结果, `Left` 是一个出错的结果:

[source,scala]
------------------------------------------
country.either() match {
  case Left(status) => println(status.getMessage)
  case Right(cc) => println(cc)
}
------------------------------------------

`Promise[T]` 实现了 `map`, `flatMap`, `filter`, `fold` 和所有的压缩时所常用的方法.  这意味着, 你可以通过使用For语句:

[source,scala]
------------------------------------------
val codeLength = for (cc <- country) yield cc.length
------------------------------------------

请注意 `codeLength` 是一个 `Promise[Int]`.  为了获得值, 你可以计算 `codeLength()` 然后你会得到一个结果`2`.

和解析 `as.String` 一样, 这里还有更多的选择供你使用..

* `as.Bytes` -- 和 `Promise[Array[Byte]]` 一起工作.
* `as.File` -- 写入一个文件, 在 `Http(svc > as.File(new File("/tmp/cc")) )` 里.
* `as.Response` -- 允许你提供一个 `client.Response => T` 方法在response上.
* `as.xml.Elem` -- 用来解析XML response.

下面是一个关于 `as.xml.Elem` 的例子:

[source,scala]
------------------------------------------
val svc = url("http://api.hostip.info/?ip=12.215.42.19")
val country  = Http(svc > as.xml.Elem)
println(country.map(_ \\ "description")())
------------------------------------------

这个例子是解析 XML response 到 request 中, 它讲返回一个 `Promise[scala.xml.Elem]`.  通过使用`map`我们找到node中的一个"description", 它将是一个 `Promise[NodeSeq]`, 并且我们将要强制计算它. 它的输出:

[source,xml]
------------------------------------------
<gml:description
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:gml="http://www.opengis.net/gml">
     This is the Hostip Lookup Service
</gml:description>
------------------------------------------

这个例子假设request是一个"标准格式". 你可以使用一些插件程序, 比如说JSoup或者TagSoup来分析那些不是标准格式的HTML.

比如说, 使用JSoup, 你需要添加以下依赖库:

[source,scala]
-------------------------------------------------
libraryDependencies += "net.databinder.dispatch" %% "dispatch-jsoup" % "0.9.5"
-------------------------------------------------

然后你就可以使用JSoup了, 你可以很简单的分析出一个element通过使用CSS selectors:

[source,scala]
-------------------------------------------------
import org.jsoup.nodes.Document

val svc = url("http://www.example.org").setFollowRedirects(true)
val title = Http(svc > as.jsoup.Document).map(_.select("h1").text).option
println( title() getOrElse "unknown title" )
-------------------------------------------------

在这里,我们使用JSoup的 `select` 方法来选择出页面上的 `<h1>` 元素, 我们把它中间的文本部分取出, 然后放入`Promise[Option[String]]`.

作为最后使用Dispatch的例子, 我们可以使用做一个通道把一个request发送到Lift's JSON library:

[source,scala]
-------------------------------------------------
import net.liftweb.json._
import com.ning.http.client

object asJson extends (client.Response => JValue) {
  def apply(r: client.Response) = JsonParser.parse(r.getResponseBody)
}

val svc = url("http://api.hostip.info/get_json.php?ip=212.58.241.131")
val json : Promise[JValue] = Http(svc > asJson)

case class HostInfo(country_name: String, country_code: String)
implicit val formats = DefaultFormats

val hostInfo = json.map(_.extract[HostInfo])()
-------------------------------------------------


我们调用的这个URL返回一个JSON的表达式, 里面是我们当前IP上的地址信息.

通过提供一个 `Response => JValue` 到Dispatch, 我们可以发送一个response到JSON的解析器. 然后我们可以使用map在 `Promise[JValue]`上去实现任何我们想要的Lift JSON方法. 在这里例子中, 我们解析一个简单的case class.

上面代码的例子将会显示`hostInfo` 为:

[source,scala]
-------------------------------------------------
HostInfo(UNITED KINGDOM,GB)
-------------------------------------------------


See Also
^^^^^^^^

Dispacth的文档是一个非常完整并且丰富的文档, 并且它能引导你了解更多关于HTTP的行为. 请花费一些时间来看: http://dispatch.databinder.net/Dispatch.html[http://dispatch.databinder.net/Dispatch.html].

如果你想了解更多关于 Dispatch的`Promise`, 请看: https://github.com/dispatch/reboot/blob/master/core/src/main/scala/promise.scala[https://github.com/dispatch/reboot/blob/master/core/src/main/scala/promise.scala].

如果你想了解更多关于Dispatch的内容, 请到Google Group: https://groups.google.com/forum/#!forum/dispatch-scala[https://groups.google.com/forum/#!forum/dispatch-scala].

上一个Dispatch的主要版本是, 0.8.x ("Dispatch Classic"), 这和现在版本的0.9有很大不同.  因此, 如果你使用0.8.x版本的例子, 你需要做一些转化才能使用在0.9.x上.  Nathan Hamblen的blog介绍了如何做改变: http://code.technically.us/post/17038250904/fables-of-the-reconstruction-part-2-have-you-tried[http://code.technically.us/post/17038250904/fables-of-the-reconstruction-part-2-have-you-tried].

对于Jsoup, 你可以在以下地址找到资料: http://jsoup.org/cookbook/[http://jsoup.org/cookbook/].

